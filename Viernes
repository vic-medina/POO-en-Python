class Persona:
    descripcion = "un ser humano común y corriente"

    def __init__(self, nombre, edad):
        self.__nombre = nombre
        self.__edad = edad

    @property
    def nombre(self):
        return self.__nombre

    @nombre.setter
    def nombre(self, nom):
        self.__nombre = nom

    @property
    def edad(self):
        return self.__edad

    @edad.setter
    def edad(self, ed):
        self.__edad = ed

    def __str__(self):
        return f"Nombre: {self.__nombre} Edad: {self.__edad}"

    def dormir(self):
        print("ZzZzZzZzZzZz que calors.... zZzz")

    @classmethod
    def constructor_defecto(cls):
        return cls("", 0)


class Alumno(Persona):
    descripcion = "Una persona que dice que estudia pero se la pasa en el cel"

    def __init__(self, nombre, edad, nc, carrera):
        Persona.__init__(self, nombre, edad)
        self.__numero_cuenta = nc
        self.__carrera = carrera

    @property
    def numero_cuenta(self):
        return self.__numero_cuenta

    @numero_cuenta.setter
    def numero_cuenta(self, nc):
        self.__numero_cuenta = nc

    @property
    def carrera(self):
        return self.__carrera

    @carrera.setter
    def carrera(self, carrera):
        self.__carrera = carrera

    def __str__(self):
        return super().__str__() + f", Numero de cuenta: {self.__numero_cuenta}, Carrera: {self.__carrera}"

    def dormir(self):
        print(super().nombre, " está durmiendo como alumno")

    @classmethod
    def constructor_defecto(cls):
        return cls("", 0, "", "")


class Profesor(Persona):
    descripcion = "Una persona que dice que enseña pero se la pasa leyendo artículos de investigación"

    def __init__(self, nombre, edad, num_tra, area):
        Persona.__init__(self, nombre, edad)
        self.__numero_trabajador = num_tra
        self.__area = area

    @property
    def numero_trabajador(self):
        return self.__numero_trabajador

    @numero_trabajador.setter
    def numero_trabajador(self, num_tra):
        self.__numero_trabajador = num_tra

    @property
    def area(self):
        return self.__area

    @area.setter
    def area(self, area):
        self.__area = area

    def __str__(self):
        return super().__str__() + f", Numero de trabajador: {self.__numero_trabajador}, Area: {self.__area}"

    def dormir(self):
        print(super().nombre, " está durmiendo como profesor")

class AyudanteProfesor(Alumno, Profesor):
    def __init__(self, nombre, edad, nc, carrera, num_tra, area, numero_horas):
        Alumno.__init__(self, nombre, edad, nc, carrera)
        Profesor.__init__(self, nombre, edad, num_tra, area)
        self.__horas = numero_horas

    @property
    def horas(self):
        return self.__horas

    @horas.setter
    def horas(self, h):
        self.__horas = h

    def __str__(self):
        return Alumno.__str__(self) + Profesor.__str__(self) + f"Horas de trabajo: {self.horas}"

    def dar_clase(self, materia):
        print(f"{self.nombre} esta dando {materia} del area {self.area} por {self.horas} horas")

    def dormir(self):
        super().dormir()
        
from cosas import *

def main():
    per1 = Persona("José",19)
    print(per1)
    print(Persona.descripcion)

    print("--Herencia--")
    al1= Alumno("José",19,"123456789","ICO")
    print(al1)
    print(Alumno.descripcion)

    al2 = Alumno.constructor_defecto()
    print(al2)
    al2.nombre = "Juan"
    print(al2)
    al2.dormir()

    print("---Herencia Profe---")
    profe1 = Profesor("José",30 + 16,123456789,"Ingenieria en software")
    print(profe1)
    profe1.dormir()

    print("---Herencia Ayudante Profe---")
    ayudante = AyudanteProfesor("Adrián",20,12345,"ICO",67890,"Ing Software",4)
    print(ayudante)
    ayudante.dormir()
    ayudante.nombre = "Abraham"
    ayudante.dar_clase("POO")


main()

import pandas as pd


class MiDataFrame(pd.DataFrame):
    def __init__(self, args):
        super().__init__(args)
        print(args)

    def prom_columnas(self):
        return self.mean()

    def obtener_maximo(self):
        return self.max()


datos = {
    'A': [24.0, 33.2, 30.2, 29.4, 29.3],
    'B': [34.0, 30.2, 31.2, 29.4, 29.3]
}

df = MiDataFrame(datos)
print(df.prom_columnas())
print(df.obtener_maximo)

import tkinter as tk


# Herencia
class MiAplicacion(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.title('Aplicación Python POO, PAPIME PE100423')
        self.geometry('300x200')
        self.configure(bg='lightgreen')
        # Composición
        self.widget = Boton(self)
        self.widget.pack()


# otra herencia
class Boton(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent, bg='blue')
        # evento
        self.button = tk.Button(self, text="Presioname!!", command=self.saludar_ya, bg='lightblue')
        self.button.pack(pady=20)

    def saludar_ya(self):
        print("¡Hola, mundo!")
